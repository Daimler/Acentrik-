## market image version
image:
  repository: public.ecr.aws/acentrik/oceanprotocol/provider-py
  tag: ak-v1.0.0
  ## Specify a imagePullPolicy
  pullPolicy: Always

## Set desired pod ReplicaSet
replica: 1

## Enable/Disable Kubernetes Secrets Store CSI Driver. Currently only support AWS provider.
## ref: https://secrets-store-csi-driver.sigs.k8s.io
## ref: https://github.com/aws/secrets-store-csi-driver-provider-aws
secretstore:
  enabled: false
  provider: aws

## Secret relevant values or keys, depends on secretstore flag
secret:
  infuraProjectId: <INFURA_PROJECT_ID>
  providerPrivateKey: changeme
  networkUrl: <RPC_URL>
  redisConnection: rediss://:PASSWORD@HOST:PORT ## Leave the value empty to disable redis connection

## ConfigMap relevant values
config:
  oceanProviderUrl: http://0.0.0.0:8030 ## self referencing
  oceanProviderWorkers: "10"
  oceanProviderTimeout: "9000"
  operatorServiceUrl: http://operator-api.ocean-operator.svc.cluster.local:8050
  aquariusUrl: https://v1.aquarius.acentrik.io
  rbacUrl: https://v1.rbac.acentrik.io
  requestRetries: "3"
  authorizedDecrypters: '["0x97fE0fC2a067b6A6d75D194CE2E6413f059a5E43"]' ## Aquarius (config.aquariusUrl) wallet address
  log:
    ## CRITICAL	50, ERROR	40, WARNING	30, INFO 20, DEBUG 10, NOTSET	0
    level: INFO
  allowNonPublicIp: "0"
  providerFeeToken: "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174" ## baseToken for provider fee (0x2791 is USDC in polygon network)

podAutoScaler:
  enabled: true
  resource:
    averageUtilization: "70"
  minReplicas: "1"
  maxReplicas: "3"

service:
  servicePort: 8030
  type: ClusterIP

## Ingress relevant values
ingress:
  enabled: true

  pathType: ImplementationSpecific # ImplementationSpecific vs Prefix

  ## The list of hostnames to be covered with this ingress record.
  ## Most likely this will be just one host, but in the event more hosts are needed, this is an array
  hosts:
    - name: provider.acentrik.io
      path: /

      ## Set this to true in order to enable TLS on the ingress record
      ## A side effect of this will be that the backend odoo service will be connected at port 443
      tls: false

      ## If TLS is set to true, you must declare what secret will store the key/certificate for TLS
      tlsSecret: provider-tls

  ## Set this to true in order to add the corresponding annotations for cert-manager
  certManager: false
  ## Ingress annotations done as key:value pairs
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
  ##
  ## If certManager is set to true, annotation kubernetes.io/tls-acme: "true" will automatically be set
  annotations:
    #  kubernetes.io/tls-acme: true
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    ## enable if using alb
    # kubernetes.io/ingress.class: alb
    # alb.ingress.kubernetes.io/scheme: internet-facing
    ## target-type: ip vs instance
    ## ip, conected service = ClusterIP
    ## instance, conected service = NodePort
    # alb.ingress.kubernetes.io/target-type: ip

  secrets:
  ## If you're providing your own certificates, please use this to add the certificates as secrets
  ## key and certificate should start with -----BEGIN CERTIFICATE----- or
  ## -----BEGIN RSA PRIVATE KEY-----
  ##
  ## name should line up with a tlsSecret set further up
  ## If you're using cert-manager, this is unneeded, as it will create the secret for you if it is not set
  ##
  # - name: provider-tls
  #  key: |
  #  certificate: |

## Configure extra options for liveness and readiness probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)
livenessProbe:
  enabled: true
  initialDelaySeconds: 20
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 10
  successThreshold: 1
readinessProbe:
  enabled: true
  initialDelaySeconds: 20
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 10
  successThreshold: 1
## Configure pod resources
# resources:
#   limits:
#     cpu: 500m
#     memory: 500Mi
#   requests:
#     cpu: 500m
#     memory: 500Mi
